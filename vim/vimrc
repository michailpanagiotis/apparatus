execute pathogen#infect()

syntax on
filetype on
filetype plugin indent on

" misc
set showcmd		  " Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase	" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
set hlsearch
set noerrorbells visualbell t_vb=
" set mouse=n		  " Enable mouse usage (all modes)
set laststatus=2
set textwidth=100
set colorcolumn=100
set number
set wrap
set linebreak
set nolist
set formatoptions+=l

" indentation
set autoindent
set backspace=2
set expandtab
set shiftwidth=2
set smartindent
set smarttab
set softtabstop=2
set tabstop=2

" swapfiles
set swapfile
set dir=~/.vim/tmp

" leader key
let mapleader = ","

" highlight trailing spaces
:highlight ExtraWhitespace ctermbg=161 guibg=#F92672
:autocmd ColorScheme * highlight ExtraWhitespace ctermbg=161 guibg=#F92672
:autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
:autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
:autocmd InsertLeave * match ExtraWhitespace /\s\+$/
:autocmd BufWinLeave * call clearmatches()

" remove whitespaces
:nnoremap <leader><space> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" colors
set t_Co=256
set background=dark
colorscheme gruvbox

" movement shortcuts
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" buffers
noremap <C-j> :bnext<CR>
noremap <C-k> :bprevious<CR>
noremap <C-x> :bdelete<CR>

" vim-flake8
autocmd BufWritePost *.py call Flake8()
let g:flake8_show_quickfix=0
let g:flake8_show_in_file=1
" use colors defined in the colorscheme
highlight link Flake8_Error      Error
highlight link Flake8_Warning    WarningMsg
highlight link Flake8_Complexity WarningMsg
highlight link Flake8_Naming     WarningMsg
highlight link Flake8_PyFlake    WarningMsg

" vim-markdown
let g:vim_markdown_folding_disabled = 1

" fzf
set rtp+=~/.fzf
" Mapping selecting mappings
nmap <Leader><tab> <plug>(fzf-maps-n)
xmap <Leader><tab> <plug>(fzf-maps-x)
omap <Leader><tab> <plug>(fzf-maps-o)
" Insert mode completion
imap <C-x><C-k> <plug>(fzf-complete-word)
imap <C-x><C-f> <plug>(fzf-complete-path)
imap <C-x><C-j> <plug>(fzf-complete-file-ag)
imap <C-x><C-l> <plug>(fzf-complete-line)
" Advanced customization using autoload functions
inoremap <expr> <C-x><C-k> fzf#vim#complete#word({'left': '15%'})
nmap <Leader>; :Buffers<CR>
nmap <Leader>t :Files<CR>
nmap <Leader>r :Tags<CR>
nmap <Leader>f :Rg<CR>

" easyytags
let g:easytags_by_filetype = '~/.vim/tags/'
let g:easytags_file = '~/.vim/tags/tags'
let g:easytags_auto_highlight = 0
let g:easytags_auto_update = 0
let g:easytags_async = 1

" Nerdtree
map <C-n> :NERDTreeToggle<CR>
let g:NERDTreeDirArrows=0
"autocmd BufEnter * lcd %:p:h

" Gitgutter
let g:gitgutter_enabled = 0
nmap <leader>gd :GitGutterToggle<CR>:GitGutterLineHighlightsToggle<CR>
nnoremap <leader>gh :GitGutterNextHunk<CR>
nnoremap <leader>gH :GitGutterPrevHunk<CR>

" Gundo
nnoremap <leader>gun :GundoToggle<CR>
let g:gundo_right = 1

" Tagbar
nmap <silent><leader>] :TagbarToggle<CR>

" TaskList
map <leader>d <Plug>TaskList

" vim-javacript
let g:javascript_plugin_jsdoc = 1

" vim-go
let g:go_auto_sameids = 1
let g:go_auto_type_info = 1
let g:go_fmt_command = "goimports"
" let g:go_fmt_options = { 'gofmt': '-s', 'goimports': '' }
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
" let g:go_metalinter_autosave = 1
" let g:go_metalinter_deadline = "5s"
" let g:go_metalinter_autosave_enabled = ['vet', 'golint']
" let g:go_metalinter_autosave_enabled = ['vet', 'golint']
" let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']
autocmd FileType go nmap <Leader>i <Plug>(go-info)

" vim-syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1

nmap <leader>s :SyntasticCheck<CR>

"vim-multiple-cursors
let g:multi_cursor_use_default_mapping = 0
let g:multi_cursor_start_word_key = '<C-m>'
let g:multi_cursor_select_all_word_key = '<A-m>'
let g:multi_cursor_start_key = 'g<C-m>'
let g:multi_cursor_select_all_key = 'g<A-m>'
let g:multi_cursor_next_key = '<C-m>'
let g:multi_cursor_prev_key = '<C-p>'
let g:multi_cursor_skip_key = '<C-x>'
let g:multi_cursor_quit_key = '<Esc>'

" vim-airline
let g:airline_theme = 'base16_eighties'
let g:airline_detect_modified = 1
let g:airline_powerline_fonts = 2
let g:airline_extensions = ['branch', 'tabline', 'virtualenv', 'whitespace', 'syntastic']
" let g:airline_left_sep = ''
" let g:airline_left_alt_sep = ''
" let g:airline_right_sep = ''
" let g:airline_right_alt_sep = ''
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
set runtimepath^=~/.vim/bundle/ag

" haskell-vim
"g:haskell_classic_highlighting = 1
"g:haskell_indent_disable = 1
let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
let g:haskell_backpack = 1                " to enable highlighting of backpack keywords

let g:tmuxline_powerline_separators = 0
let g:tmuxline_preset = {
    \'a'    : '#S',
    \'c'    : ['#(curl icanhazip.com)', "#(ifconfig en0 | grep 'inet ' | awk     '{print \"en0 \" $2}') #(ifconfig en1 | grep 'inet ' | awk '{print \"en1 \" $2}')"],
    \'win'  : '#I #W',
    \'cwin' : '#I #W',
    \'x'    : '#H',
    \'y'    : '#(tmux-mem-cpu-load --averages-count 0 --graph-lines 0 --interval 2)',
    \'z'    : ["%a %d %Y", "%T %Z", "#(date -u | awk '{print $4}') UTC"]}

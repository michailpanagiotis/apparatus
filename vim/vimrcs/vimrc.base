""
"" Pathogen setup
""

execute pathogen#infect()
""
"" Customisations
""
"if filereadable(expand("~/.vim/vimrcs/vimrc.before"))
"  source ~/.vim/vimrcs/vimrc.before
"endif


" .vimrc.after is loaded after the plugins have loaded
"
"if filereadable(expand("~/.vim/vimrcs/vimrc.after"))
"  source ~/.vim/vimrcs/vimrc.after
"endif


" .vimrc.custom is loaded after the 'after' have loaded
"
"if filereadable(expand("~/.vim/vimrcs/vimrc.custom"))
"  source ~/.vim/vimrcs/vimrc.custom
"endif

syntax on
filetype on
filetype plugin indent on

set showcmd          " Show (partial) command in status line.
set showmatch        " Show matching brackets.
set ignorecase    " Do case insensitive matching
set smartcase        " Do smart case matching
set incsearch        " Incremental search
set hlsearch
set mouse=a          " Enable mouse usage (all modes)
set autoindent
set tabstop=4
set expandtab
set softtabstop=4
set shiftwidth=4
set textwidth=80
set number
set colorcolumn=80
set wrap
set linebreak
set nolist
set formatoptions+=l
set cursorline
set undofile
"leader key
let mapleader = ","
let g:mapleader = ","



" highlight trailing spaces
:highlight ExtraWhitespace ctermbg=161 guibg=#F92672
:autocmd ColorScheme * highlight ExtraWhitespace ctermbg=161 guibg=#F92672
:autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
:autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
:autocmd InsertLeave * match ExtraWhitespace /\s\+$/
:autocmd BufWinLeave * call clearmatches()

:nnoremap <Leader>wn :match ExtraWhitespace /\s\+$/<CR>
:nnoremap <Leader>wf :match<CR>

"" remove whitespaces
:nnoremap <Leader>wnf :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set t_Co=256
set background=dark
let g:molokai_original = 1

if has('gui_running')
  "set background=light
  set guifont=Monospace\ 12
  colorscheme solarized
else
  colorscheme molokai
endif

let g:solarized_termcolors=256
set background=dark
colorscheme solarized"

"Movement sortcuts
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h
nnoremap tl :tabnext<CR>
nnoremap th :tabprev<CR>
nnoremap tn :tabnew<CR>



"CtrlP
nnoremap <leader>t :CtrlP<CR>
let g:ctrlp_use_caching = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_max_height = 20
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_user_command = [
    \ '.git', 'cd %s && git ls-files . -co --exclude-standard',
    \ 'find %s -type f'
    \ ]

"easyytags
let g:easytags_by_filetype = '/home/mike/.vim/tags/'
let g:easytags_file = '/home/mike/.vim/tags/tags'
let g:easytags_auto_highlight = 0

"nerdtree
map <C-n> :NERDTreeToggle<CR>
let g:NERDTreeDirArrows=0
let NERDTreeShowHidden=1
"autocmd BufEnter * lcd %:p:h

" gitgutter
let g:gitgutter_enabled = 0
nmap <leader>gd :GitGutterToggle<CR>:GitGutterLineHighlightsToggle<CR>
nnoremap <leader>gh :GitGutterNextHunk<CR>
nnoremap <leader>gH :GitGutterPrevHunk<CR>

" Gundo
nnoremap <leader>gun :GundoToggle<CR>
let g:gundo_right = 1

"Tagbar
nmap <silent><Leader>b :TagbarToggle<CR>


"Pytest
nmap <silent><Leader>f <Esc>:Pytest file<CR>
nmap <silent><Leader>p <Esc>:Pytest project<CR>
nmap <silent><Leader>c <Esc>:Pytest class<CR>
nmap <silent><Leader>m <Esc>:Pytest method<CR>


"Multiple Paste
xnoremap p pgvy
set clipboard="+


"vim-expand-region
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

"remove trailing spaces
"autocmd BufWritePre * :%s/\t/    /e
autocmd BufWritePre * :%s/\s\+$//e

"Makefiles
:autocmd FileType make set noexpandtab

"Syntastic for php
let g:syntastic_php_phpcs_args="--report=csv --standard=Laravel"
autocmd FileType php setlocal expandtab textwidth=120 colorcolumn=120

"Underline Search
highlight Search term=underline cterm=underline ctermbg=NONE ctermfg=Red

let g:surround_custom_mapping = {}
let g:surround_custom_mapping.python = {
            \ 'p':  "print( \r)",
            \ '[':  "[\r]",
            \ }


"replace all selected text with Ctrl-r
vnoremap <C-R> "hy:%s/<C-r>h//gc<left><left><left>

"do not insert *newline* chars when a line has exceeded its size
set textwidth=0 wrapmargin=0

autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType yaml setlocal shiftwidth=2 tabstop=2 softtabstop=2

"Syntastic for javascript
let g:syntastic_javascript_checkers = ['eslint']

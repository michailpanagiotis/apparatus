execute pathogen#infect()

syntax on
filetype on
filetype plugin indent on

set showcmd		  " Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase	" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
set hlsearch
set mouse=a		  " Enable mouse usage (all modes)
set autoindent
set laststatus=2
set smartindent
set tabstop=2
set expandtab
set softtabstop=2
set shiftwidth=2
set textwidth=80
set number
set colorcolumn=80
set wrap
set linebreak
set nolist
set formatoptions+=l
set cursorline
set backspace=2

set swapfile
set dir=~/.vim/tmp

"leader key
let mapleader = ","
let g:mapleader = ","

" highlight trailing spaces
:highlight ExtraWhitespace ctermbg=161 guibg=#F92672
:autocmd ColorScheme * highlight ExtraWhitespace ctermbg=161 guibg=#F92672
:autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
:autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
:autocmd InsertLeave * match ExtraWhitespace /\s\+$/
:autocmd BufWinLeave * call clearmatches()

"" remove whitespaces
:nnoremap <leader><space> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set t_Co=256
set background=dark
colorscheme gruvbox

"Movement sortcuts
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

"vim-flake8
autocmd BufWritePost *.py call Flake8()
let g:flake8_show_quickfix=0
let g:flake8_show_in_file=1
" use colors defined in the colorscheme
highlight link Flake8_Error      Error
highlight link Flake8_Warning    WarningMsg
highlight link Flake8_Complexity WarningMsg
highlight link Flake8_Naming     WarningMsg
highlight link Flake8_PyFlake    WarningMsg

"vim-markdown
let g:vim_markdown_folding_disabled = 1

"CtrlP
nnoremap <leader>t :CtrlP<CR>
nnoremap <leader>b :CtrlPBuffer<CR>
let g:ctrlp_use_caching = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_max_height = 20
let g:ctrlp_match_window_reversed = 0

"easyytags
let g:easytags_by_filetype = '/Users/mike/.vim/tags/'
let g:easytags_file = '/Users/mike/.vim/tags/tags'
let g:easytags_auto_highlight = 0
let g:easytags_auto_update = 0
let g:easytags_async = 1

"nerdtree
map <C-n> :NERDTreeToggle<CR>
let g:NERDTreeDirArrows=0
"autocmd BufEnter * lcd %:p:h

" gitgutter
let g:gitgutter_enabled = 0
nmap <leader>gd :GitGutterToggle<CR>:GitGutterLineHighlightsToggle<CR>
nnoremap <leader>gh :GitGutterNextHunk<CR>
nnoremap <leader>gH :GitGutterPrevHunk<CR>

" Gundo
nnoremap <leader>gun :GundoToggle<CR>
let g:gundo_right = 1

"Tagbar
nmap <silent><leader>] :TagbarToggle<CR>

"TaskList
map <leader>td <Plug>TaskList

"vim-go
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

"vim-syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1

let g:syntastic_aggregate_errors = 1

"vim-airline
let g:airline_theme='base16_default'
let g:airline_detect_modified=1
let g:airline_extensions = ['branch', 'virtualenv', 'whitespace', 'syntastic']
" let g:airline_section_y = ''
" let g:airline#extensions#tabline#left_sep = ' '
" let g:airline#extensions#tabline#left_alt_sep = '|'
" let g:airline#extensions#tabline#buffer_min_count = 0
" let g:airline#extensions#whitespace#symbol = '!'

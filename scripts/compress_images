#!/bin/bash
set -e

function relative_path() {
  python -c "import os,sys;print(os.path.relpath(*(sys.argv[1:])))" "$@";
}

function absolute() {
  echo "$(cd "$(dirname "$1")"; pwd)/$(basename "$1")"
}

function compress_comic_destructive() {
  local FULLPATH=$(realpath "$1")
  local DIR=$(dirname -- "$FULLPATH")
  local FILENAME=$(basename "$1")
  local FILETYPE=$(file "$FULLPATH")
  local TEMPFILE=".temp"
  cd $DIR
  case $FILETYPE in
      *"Zip archive data"*)
	unzip -q -j "$FILENAME"
	;;
      *"RAR archive data"*)
	unrar e "$FILENAME" -idq
	;;
      *)
	echo Unknown comic format
	exit -1
  	;;
  esac
  rm "$FILENAME"
  find $DIR -type f -print0 | while IFS= read -r -d '' file; do
    compress_file_destructive "$file"
  done

  case $FILETYPE in
      *"Zip archive data"*)
	zip -0 -q "$TEMPFILE" *
	;;
      *"RAR archive data"*)
	rar a -idq -m0 "$TEMPFILE" *
	;;
      *)
	echo Unknown comic format
	exit -1
  	;;
  esac
  find . -type f \! \( -name "$TEMPFILE" \) -exec rm {} \;
  mv "$TEMPFILE" "$FILENAME"
  cd -
}

function compress_file_destructive() {
  local FULLPATH=$(realpath "$1")
  local FILENAME=$(basename -- "$FULLPATH")
  local EXTENSION="${FILENAME##*.}"
  local OUTPUT_DIR=$(dirname -- "$FULLPATH")
  >&2 echo DESTRUCTIVE $(file "$FULLPATH")
  case $(file "$FULLPATH") in
      *"image data"*)
	local OUTFILE="$OUTPUT_DIR"/"${FILENAME%.*}".webp
	>&2 echo compressing \'"$FULLPATH"\' to \'"$OUTFILE"\'
  	magick "$FULLPATH" -strip -interlace Plane -quality 50% -quiet "$OUTFILE"
	echo "$OUTFILE"
  	;;
      *"HEIF Image HEVC"*)
	local OUTFILE="$OUTPUT_DIR"/"${FILENAME%.*}".webp
	>&2 echo compressing \'"$FULLPATH"\' to \'"$OUTFILE"\'
  	magick "$FULLPATH" -profile srgb.icc -strip -interlace Plane -quiet "$OUTFILE"
	echo "$OUTFILE"
  	;;
      *"Apple QuickTime"*)
	local OUTFILE="$OUTPUT_DIR"/"${FILENAME%.*}".mp4
	>&2 echo compressing \'"$FULLPATH"\' to \'"$OUTFILE"\'
	local EXIF_DATE=$(exiftool -T -CreateDate "$FULLPATH")
	</dev/null ffmpeg -nostdin -y -i "$FULLPATH" -movflags use_metadata_tags -c:v libx265 -c:a -preset slow copy -x265-params crf=22 "$OUTFILE"
	exiftool -overwrite_original -q -DateTimeOriginal="$EXIF_DATE" "$OUTFILE"
	echo "$OUTFILE"
	;;
      *"Zip archive data"*|*"RAR archive data"*)
	case $EXTENSION in
	    "cbz"|"cbr")
	      compress_comic_destructive "$1"
	      ;;
	    *)
	      ;;
	esac
	;;
      *)
  	;;
  esac
}

function compress_file_to_output_dir() {
  local TEMP=$(mktemp -d -p /tmp)
  local FULLPATH=$(realpath "$1")
  local OUTDIR=$(absolute "$2")
  local FILENAME=$(basename "$FULLPATH")
  echo Compressing \'"$FILENAME"\' through $TEMP...
  mkdir -p $TEMP
  cp "$FULLPATH" $TEMP/"$FILENAME"
  OUTFILE=$(compress_file_destructive $TEMP/"$FILENAME")
  mkdir -p "$OUTDIR"
  cp "$OUTFILE" "$OUTDIR/"
  rm -rf $TEMP
}

function compress_folder_contents() {
  local ROOT_PATH=$(realpath "$1")
  local OUTPUTPATH="$PWD"/$(basename $ROOT_PATH).compressed
  find $ROOT_PATH -type f -not -path '*/.*' -print0 | while IFS= read -r -d '' file; do
    local OUTPUT_FILE="$OUTPUTPATH"/"$(relative_path "$(realpath "$file")" "$ROOT_PATH")"
    if [[ -f "$OUTPUT_FILE" ]]
    then
      echo Already compressed: "$OUTPUT_FILE"
    else
      local OUTPUT_DIR=$(dirname -- "$OUTPUT_FILE")
      mkdir -p "$OUTPUT_DIR"
      compress_file_to_output_dir "$file" "$OUTPUT_DIR"
    fi
  done
}

if [[ -d "$1" ]]
then
  compress_folder_contents $1
elif [[ -f "$1" ]]
then
  compress_file_to_output_dir "$1" ./compressed
else
  echo "Expecting a directory as input"
  exit
fi

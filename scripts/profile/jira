#!/usr/bin/env bash

__parse_ticket_key() {
  echo $1 | awk -F '\t' '
    function parse_ticket(branch_name) {
      full_match_idx = match(branch_name, /([A-Z]+-[0-9]+)/);
      if (full_match_idx == 0) {
        return "";
      }

      ticket_start_match = substr(branch_name, full_match_idx);

      number_start_idx = match(ticket_start_match, /[0-9]+/);
      number_start_match = substr(ticket_start_match, number_start_idx);
      number_end_idx = match(number_start_match, /[^0-9]/);

      ticket_project = substr(ticket_start_match, 0, number_start_idx - 2);
      ticket_number = substr(number_start_match, 0, number_end_idx == 0 ? length(number_start_match) : number_end_idx - 1);
      ticket = sprintf("%s-%s", ticket_project, ticket_number);
      return ticket;
    }
    {
      parse_ticket($1);
      printf("%s %s %s\n", ticket, ticket_project, ticket_number);
    }
  '
}

ticket_key() {
  __parse_ticket_key $1 | awk '{print $1}'
}

ticket_project() {
  __parse_ticket_key $1 | awk '{print $2}'
}

ticket_number() {
  __parse_ticket_key $1 | awk '{print $3}'
}

ticket_summary() {
  JIRA_PROJECT=$(ticket_project $1)
  JIRA_TICKET=$(ticket_key $1)
  SUMMARY=$(jira issue list --plain --no-headers --columns "key,summary" --project ${JIRA_PROJECT} -q"key=${JIRA_TICKET}" | awk -F '\t' '{ print $2;}')
  if [ -z "${SUMMARY}" ]; then
      echo Cannot find jira ticket $JIRA_TICKET
      return 1
  fi
  echo $SUMMARY
}

json_tickets() {
  tickets=$(echo $@ | jq -Rr 'split(" ") | join(",")')
  query="key IN (${tickets})"
  jira issue list \
    --no-headers \
    --plain \
    --no-truncate \
    --columns type,key,status,priority,created,updated,summary,assignee \
    -q"${query}" | jq -Rfs $HOME/.apparatus/scripts/jq/parse_jira.jq | jq -s 'map({ key: .key, value: .}) | from_entries'
}

jira_summary_per_ticket() {
  json_tickets $@ | jq 'map_values(.summary)'
}

jget() {
  args="$@"
  echo $args | jq -ncR 'input | split(" ") | map(capture("(?<ticket>(?<project>[A-Z]+)-([0-9]+))")) | group_by(.project) | map({ project: first.project, tickets: map(.ticket) | join(",") }) | .[]' |
  while IFS=$"\n" read -r c; do
    project=$(echo "$c" | jq -r '.project')
    tickets=$(echo "$c" | jq -r '.tickets')
    jira issue list \
      --no-headers \
      --plain \
      --no-truncate \
      --columns type,key,status,priority,created,updated,summary,assignee \
      --project ${project} \
      -q"key IN (${tickets})" | jq -Rfs $HOME/.apparatus/scripts/jq/parse_jira.jq
    done | jq -s 'map({ key: .key, value: .}) | from_entries'
}

jget_http() {
  for ticket in "$@"
  do
    curl -s  ${JIRA_API_URL}/issue/${ticket} -u "${JIRA_API_USER}:${JIRA_API_TOKEN}" | jq -f $HOME/.apparatus/scripts/jq/parse_jira_http.jq
  done | jq -s 'map({ key: .key, value: .}) | from_entries'
}

jsearch() {
  value=${*:-`cat`}
  if [[ -z $value ]]; then
    echo "Usage:\n\tjsearch [jql]"
    return 1
  fi
  >&2 echo "Getting jira tickets: $value"
  tickets=$(
    curl -s \
      --request POST ${JIRA_API_URL}/search \
      -u "${JIRA_API_USER}:${JIRA_API_TOKEN}" \
      --header 'Accept: application/json' \
      --header 'Content-Type: application/json' \
      --data "{ \"jql\": \"$value\" }"
  )
  >&2 echo "Parsing jira tickets: $value"
  echo "$tickets" | jq '.issues' | jq -f $HOME/.apparatus/scripts/jq/parse_jira_http.jq | jq 'map({ key: .key, value: . }) | from_entries'
}

jql() {
  curl -s --request POST ${JIRA_API_URL}/search -u "${JIRA_API_USER}:${JIRA_API_TOKEN}" --header 'Accept: application/json' --header 'Content-Type: application/json'  --data "$1" \
    | jq '.issues' | jq -f $HOME/.apparatus/scripts/jq/parse_jira_http.jq
}

jsubtasks() {
  if [ -z $1 ]; then
    echo "Usage:\n\tjsubtasks [issue]"
    return 1
  fi
    jira issue list \
      --no-headers \
      --plain \
      --no-truncate \
      --columns key \
      -q"parent='$1'" \
      | jq -Rs "split(\"\n\") | { \"$1\": map(select(. != \"\")) }"
}

jtree() {
  if [ -z $1 ]; then
    echo "Usage:\n\tjtree [project]"
    return 1
  fi
    jira issue list \
      --no-headers \
      --plain \
      --no-truncate \
      --columns key \
      --project ${1} \
      -q"assignee in (currentUser()) and type not in ('Epic', 'Sub-task')" \
  | while IFS=$"\n" read -r c; do
    jsubtasks $c
    done | jq -s 'add'
}

jcreate-subtask() {
  jira issue create --no-input -p PAYM -t"Sub-task" -P"PAYM-493" -s"Create rest controller for incoming payments" -b"Create rest controller for incoming payments" -a"panos@talentdesk.io"
}

jbug() {
  USER=$(jira me)
  PROJECT=BT
  DESCRIPTION=$1
  jira -c ~/.config/.jira/.config.BT.yml issue create --no-input -p ${PROJECT} -t 'Bug' -s \"${DESCRIPTION}\" -b \"${DESCRIPTION}\" -a \"${USER}\" -r \"${USER}\" --custom Team='Payments development'
}

bugdev-request() {
  USER=$(jira me)
  PROJECT=BT
  DESCRIPTION=$1
  jira -c ~/.config/.jira/.config.BT.yml issue create --no-input -p ${PROJECT} -t 'BugDev Request' -s \"${DESCRIPTION}\" -b \"${DESCRIPTION}\" -a \"${USER}\" -r \"${USER}\" --custom Team='Payments development'
}

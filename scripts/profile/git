#!/usr/bin/env bash

__assert_clean() {
  if [ ! -z "$(git status --porcelain)" ]; then
    echo please commit your changes first
    return 1
  fi
}

get_master_branch() {
  git symbolic-ref refs/remotes/origin/HEAD | awk '{ref = substr($1, match($1, /[^/]+$/));  print ref}'
}

get_branch_root() {
  MASTER=$(get_master_branch)
  git log ${MASTER}..HEAD --oneline | tail -1 | awk '{print $1}'
}

__merge_master_on() {(
  set -e
  __assert_clean
  MASTER=$(get_master_branch)
  current=$(git branch --show-current)
  git checkout $1
  greset
  git pull
  git merge --no-edit ${MASTER}
  git push
  git checkout $current
)}

greset() {
  # resets git branch to origin
  BRANCH=$(git branch --show-current)
  git reset --hard origin/${BRANCH}
}

gsquash() {(
  set -e
  __assert_clean
  # squashes all commits of current branch
  ROOT=$(get_branch_root)
  MESSAGE=$(git log --format=%B -n 1 $ROOT)
  git reset ${ROOT}~1
  git add .
  git commit -m "${MESSAGE}"
)}

gsync() {(
  set -e
  __assert_clean
  MASTER=$(get_master_branch)
  current=$(git branch --show-current)
  git pull --all
  if [ $current = $MASTER ];
  then
    git pull
  else
    git fetch origin ${MASTER}:${MASTER}
  fi
  __merge_master_on next
  __merge_master_on staging2
)}

gstatus() {
  git status
}

gref() {
  if [ -z $1 ]; then
    echo "Usage:\n\tgref [days_back]"
    return 1
  fi

  # echo Commits since ${SINCE}
  SINCE=$(date -d "-$1 days 00:00" --rfc-3339=s)
  SINCE_TIMESTAMP=$(date -d "-$1 days 00:00" +%s)
  TAB="%x09"

  git \
    --no-pager \
    reflog \
    --date=unix \
    --abbrev=40 \
    --no-abbrev-commit \
    --author="$(git config user.name)" \
    --pretty="format:%Cred%h%Creset %Cgreen@ %cI%Creset %C(bold blue)%gd%Creset %s" \
    --exclude="HEAD" \
    --branches="*" \
    --format="%h${TAB}%an${TAB}%cd${TAB}%s${TAB}%gd" | tr "\"" "\`" \
    | jq -Rfs $HOME/.apparatus/scripts/jq/parse_reflog.jq \
    | jq "map(select(.timestamp > ${SINCE_TIMESTAMP} ))"
}


gtickets() {
  if [ -z $1 ]; then
    echo "Usage:\n\tgtickets [days_back]"
    return 1
  fi
  gref $1 \
  | jq '. | map(select(.meta.ticket != null)) | map(.meta.ticket.id) | sort | unique | .[]' \
  | xargs echo
}

# Consume standard input up to, and including, an empty line.
# Sets global variable 'etag'.
parse_headers () {
  local header etag_regex='link: (.*)'
  link=""
  while read -d $'\r\n' header; do
    if [[ $header =~ $etag_regex ]]; then
      link=$(echo $header | sed 's/^link: //')
    elif [[ -z $header ]]; then
      # End of headers
      break
    fi
  done
}

function urldecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }

github_pushes() {
  if [ -z $1 ]; then
    echo "Usage:\n\tgithub_pushes [owner/repo]"
    return 1
  fi

  {
    parse_headers
    jq -c '. | map(select(.type == "PushEvent")) | .[]'
  } < <(curl --include -H "Authorization: token $GH_TOKEN" https://api.github.com/repos/$1/events)

  max_page=20
  page=2

  while [ -n $link ] && [ ${page} -le ${max_page} ]; do
    sleep 1
    url=$(echo $link | jq -rR 'split(", ") | map(capture("<(?<url>[^;]+)>; rel=\"(?<ref>.+)\"")| select(.ref=="next")) | first | .url ')
    >&2 echo $link Page $page: $url
    {
      parse_headers
      jq -c '. | map(select(.type == "PushEvent")) | .[]'
    } < <(curl --include -H "Authorization: token $GH_TOKEN" $url)
    page=$((page+1))
  done
}

create_keys() {
  if [ -z $EMAIL ] || [ -z $VMID ]; then
    echo "Usage:\n\tEMAIL=[EMAIL] VMID=[VMID] create_keys"
    return 1
  fi
  ssh-keygen -t ed25519 -C "${EMAIL}" -N '' -f ~/.ssh/id_${VMID}
}

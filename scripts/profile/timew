#!/usr/bin/env bash

timew_summary() {
  timew summary :all :ids :annotation
}

timew_slurp() {
  while IFS=$"\n" read -r c; do
    cmd=$(echo timew track $c)
    echo $cmd
    eval $cmd
  done
}

timew_purge() {
  timew ids :all | head -n 1 |
  while IFS=$"\n" read -r c; do
    cmd=$(echo timew delete $c)
    echo $cmd
    eval $cmd
  done
}

timew_from_git() {
  if [ -z $1 ]; then
    echo "Usage:\n\ttimew_from_git [days_back]"
    return 1
  fi
  gref $1 | jq -L$HOME/.apparatus/scripts/jq -rf $HOME/.apparatus/scripts/jq/gj2tw.jq
}

timew_track_from_git() {
  if [ -z $1 ]; then
    echo "Usage:\n\ttimew_track_from_git [days_back]"
    return 1
  fi
  timew_from_git $1 | timew_slurp
}

timew_annotate_from_jira() {
  ticket_keys=$(timew tickets :all)
  >&2 echo Fetching $ticket_keys from JIRA...
  summary_per_ticket=$(jira_summary_per_ticket $ticket_keys)
  >&2 echo "Fetched:\n$summary_per_ticket"
  intervals=$(timew json :all | jq '.intervals')
  (echo "{ \"summary_per_ticket\": $summary_per_ticket, \"intervals\": $intervals }") \
    | jq -L~/.apparatus/scripts/jq -rf ~/.apparatus/scripts/jq/timew_annotate.jq |
  while IFS=$"\n" read -r c; do
    eval $c
  done
}

timew_import() {
  if [ -z $1 ]; then
    echo "Usage:\n\ttimew_import [file]"
    return 1
  fi
  cat $1 |
  while IFS=$"\n" read -r c; do
    echo $c
    eval $c
  done
}

timew_health() {
  ids_with_multiple_tickets=$(timew json :all | jq -r '.intervals | map(select((.meta.tickets | length) > 1) | "@\(.id)") | join(" ")')
  if [ ! -z $ids_with_multiple_tickets ]; then
    echo "Intervals ${ids_with_multiple_tickets} have multiple assigned tickets"
    return 1
  fi
  echo Timewarrior healthy!
}

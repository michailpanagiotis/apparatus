#!/usr/bin/env bash
read -r -d '' BESPOT_COMPANY_INFO <<- EOM
  {
    "name": "BESPOT IKE",
    "description": "ΑΝΑΠΤΥΞΗ ΣΥΣΤΗΜΑΤΩΝ ΠΛΗΡΟΦΟΡΙΚΗΣ",
    "vat": "801070388",
    "doy": "Α' ΑΘΗΝΩΝ",
    "address": "ΒΟΥΤΑΔΩΝ 28, ΑΘΗΝΑ 11854"
  }
EOM

read -r -d '' PMICHAIL_COMPANY_INFO <<- EOM
  {
    "logo": "/Users/pmichail/Projects/invoice/logo5.png",
    "name": "Παναγιώτης Μιχαήλ",
    "description": "ΑΝΑΠΤΥΞΗ ΣΥΣΤΗΜΑΤΩΝ ΠΛΗΡΟΦΟΡΙΚΗΣ",
    "vat": "124393808",
    "doy": "ΨΥΧΙΚΟΥ",
    "address": "ΛΟΥΙΖΗΣ ΡΙΑΝΚΟΥΡ 4, ΑΘΗΝΑ 11523",
    "linkedin": "panosmichail",
    "email": "michailpanagiotis@gmail.com",
    "github": "michailpanagiotis",
    "copy": "Panagiotis Michail 2024",
    "paymentDetails": {
      "beneficiary": "Παναγιώτης Μιχαήλ",
      "iban": "GR9801711300006130010180298",
      "bic": "PIRBGRAAXXX"
    }
  }
EOM

cdb() {
  PGPASSWORD=opap_api_dev_password psql -U opap_api_dev_user -d opap_api_dev_db -h localhost
}

psql_kontakt_ids() {
  PGPASSWORD=opap_api_dev_password psql -At -U opap_api_dev_user -d opap_api_dev_db -h localhost -c " \
    select store_id, string_agg(kontakt_unique_id, ',') from beacons_beacon where kontakt_unique_id != '' group by store_id;
      " | jq -Rsr 'split("\n") | map(select(. != "") | split("|") | . as [$store_pk, $beacons] | { key: $store_pk, value: ($beacons | split(",")) }) | map(select((.value | length) > 8)) | from_entries'
}

psql_otp() {
  PGPASSWORD=opap_api_dev_password psql -U opap_api_dev_user -d opap_api_dev_db -h localhost -c " \
    SELECT tk.*, dev.name, dev.confirmed, dev.user_id, usr.username \
    FROM otp_static_statictoken AS tk  \
      INNER JOIN otp_static_staticdevice AS dev ON dev.id=tk.device_id \
      INNER JOIN users_user AS usr ON usr.id=dev.user_id \
    WHERE usr.is_superuser is true order by usr.id; \
  "
}

psql_beacon_incidents() {
  PGPASSWORD=opap_api_dev_password psql -U opap_api_dev_user -d opap_api_dev_db -h localhost -c " \
    WITH names_per_blueprint AS (SELECT blueprint_id, array_to_json(array_agg(CONCAT('Beacon ', beacon_blueprint->'index') ORDER BY beacon_blueprint->'index')) AS beacon_names FROM (SELECT uuid AS blueprint_id, jsonb_array_elements(attributes->'beacons') AS beacon_blueprint FROM stores_storeblueprint) t GROUP BY blueprint_id), beacons_per_blueprint AS (SELECT bb.uuid AS beacon_id, bb.kontakt_unique_id, bb.name AS beacon_name, bl.uuid AS blueprint_id, names.beacon_names FROM beacons_beacon AS bb INNER JOIN stores_storeblueprint AS bl ON bl.store_id=bb.store_id INNER JOIN names_per_blueprint AS names ON names.blueprint_id=bl.uuid WHERE bb.kontakt_unique_id='' AND ((bb.name <> '') IS NOT TRUE OR NOT (beacon_names)::jsonb ? bb.name)) SELECT * FROM beacons_per_blueprint;
  "
}

psql_users() {
  PGPASSWORD=opap_api_dev_password psql -U opap_api_dev_user -d opap_api_dev_db -h localhost -c " \
    SELECT id, is_superuser, username, email, is_staff, is_active from users_user WHERE is_superuser IS FALSE ORDER BY id \
  "
}

psql_superusers() {
  PGPASSWORD=opap_api_dev_password psql -U opap_api_dev_user -d opap_api_dev_db -h localhost -c " \
    SELECT id, is_superuser, username, email, is_staff, is_active from users_user WHERE is_superuser IS TRUE ORDER BY id \
  "
}

read -r -d '' change_passwords_script <<- EOM
from users.models import User
for u in User.objects.all():
    print("Changing password for %s to '123456'" % u)
    u.set_password("123456");
    u.save()
EOM

refresh_otp() {
  # add 5 otp passwords for each device
  for i in {1..5}
  do
    PGPASSWORD=opap_api_dev_password psql -U opap_api_dev_user -d opap_api_dev_db -h localhost -c " \
      INSERT INTO otp_static_statictoken (device_id, token) SELECT id AS device_id, 'static-0' AS token FROM otp_static_staticdevice;
    "
  done
}

beacon_incidents() {
  # add 1000 incidents for each beacon, takes about 15 minutes
  PGPASSWORD=opap_api_dev_password psql -U opap_api_dev_user -d opap_api_dev_db -h localhost -c " \
    INSERT INTO beacons_beaconincident (uuid, created, modified, created_at, reason, status, summary, beacon_id) SELECT gen_random_uuid(), NOW(), NOW(), NOW(), 'Out Of Range', 'Unresolved', 'My summary', t.* FROM generate_series(1,1000) i CROSS JOIN LATERAL (SELECT uuid FROM beacons_beacon) t;
  "
}

prepare_db() {
  docker exec -it -e COLUMNS=$COLUMNS -e LINES=$LINES opap-api-container-1 bash -cils "cd opap_api && python manage.py shell -c '$change_passwords_script'"
}

seed_db() {
  if [ -z $1 ]; then
    echo "Usage:\n\tseed_db [pg_dump_file]"
    return 1
  fi
  # cleanup
  PGPASSWORD=opap_api_dev_password psql -U opap_api_dev_user -d postgres -h localhost -c "DROP DATABASE opap_api_dev_db"
  PGPASSWORD=opap_api_dev_password psql -U opap_api_dev_user -d postgres -h localhost -c "CREATE DATABASE opap_api_dev_db TEMPLATE template0"
  # load dump
  PGPASSWORD=opap_api_dev_password pg_restore -v --no-privileges --no-owner -U opap_api_dev_user -d "opap_api_dev_db" -h localhost $1
}

run-tests() {
  docker exec -it -e COLUMNS=$COLUMNS -e LINES=$LINES opap-api-container-1 bash -cils 'cd opap_api && python manage.py test --keepdb --failfast'
}

jwt() {
  echo Getting jwt for $API_USERNAME:$API_PASSWORD
  curl --request POST http://localhost:8000/api/auth/jwt/token/ --header 'Accept: application/json' --header 'Content-Type: application/json' --data "{ \"username\": \"$API_USERNAME\", \"password\": \"$API_PASSWORD\" }"
}

run-container() {
  docker exec -it -e COLUMNS=$COLUMNS -e LINES=$LINES opap-api-container-1 bash
}

run-server() {
  docker exec -it -e COLUMNS=$COLUMNS -e LINES=$LINES opap-api-container-1 python opap_api/manage.py runserver 0.0.0.0:80
}

gunicorn() {
  if [ -z $1 ]; then
    echo "Usage:\n\tgunicorn [num_workers]"
    return 1
  fi
  docker exec -it -e COLUMNS=$COLUMNS -e LINES=$LINES -e WEB_CONCURRENCY=$1 opap-api-container-1 gunicorn opap_api.wsgi:application
}

install_nvim() {
  apt-get update && apt-get install -y curl g++ git && git clone https://github.com/michailpanagiotis/apparatus.git ${HOME}/.apparatus && ln -s ${HOME}/.apparatus/nvim ${HOME}/.config && curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage && chmod +x nvim.appimage && ./nvim.appimage --appimage-extract && mv squashfs-root / && ln -s /squashfs-root/AppRun /usr/bin/nvim && mkdir -p ~/.vim/files/info && nvim
}

bespot_invoice() {
  INVOICE_LANGUAGE=el INVOICE_TAX_WITHHOLDING_PERCENT=20 INVOICE_RECIPIENT="$BESPOT_COMPANY_INFO" INVOICE_SENDER="$PMICHAIL_COMPANY_INFO" timew invoice :all
}

rds_tunnel() {
  ssh -i ~/.ssh/id_rsa -L 3306:opap-api-rds-cluster-staging.cluster-c5yw1bdpivl4.eu-central-1.rds.amazonaws.com:3306 ec2-user@18.159.112.135
}

rds_staging() {
  PGPASSWORD=$PGPASSWORD_STAGING psql -p 3306 -U opap_api_root -d opap_api -h localhost
}

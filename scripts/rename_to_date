#!/bin/bash
set -e

function relative_path() {
  python -c "import os,sys;print(os.path.relpath(*(sys.argv[1:])))" "$@";
}

function absolute() {
  echo "$(cd "$(dirname "$1")"; pwd)/$(basename "$1")"
}

function rename_file() {
  local FULLPATH=$(realpath "$1")
  local FILENAME=$(basename "$FULLPATH")
  local DIR=$(dirname -- "$FULLPATH")

  local EXIF_DATE=$(exiftool -ee -T -DateTimeOriginal "$1")

  if [[ "$EXIF_DATE" == "-" ]]; then
    EXIF_DATE=$(exiftool -ee -T -CreationDate "$1")
  fi

  if [[ "$EXIF_DATE" == "-" ]]; then
    EXIF_DATE=$(exiftool -ee -T -FileModifyDate "$1")
  fi

  local PREFIX=$(date -j -f "%Y:%m:%d %H:%M:%S" "${EXIF_DATE%+*}" +%Y%m%d)
  local OUTPUT_PATH="$DIR"/"$PREFIX"_"$FILENAME"
  if [[ -f "$OUTPUT_PATH" ]]
  then
    echo Already renamed: "$OUTPUT_PATH"
  elif [[ "$FILENAME" == "$PREFIX"* ]]; then
    echo Already renamed: "$FULLPATH"
  else
    echo Renaming \'"$FULLPATH"\' to \'"$OUTPUT_PATH"\'...
    mv "$FULLPATH" "$OUTPUT_PATH"
  fi
}

function rename_folder_contents() {
  find "$(realpath "$1")" -type f -not -path '*/.*' -not -regex '.*/[0-9]*_.*' -exec rename_to_date {} \;
}

if [[ -d "$1" ]]
then
  rename_folder_contents "$1"
elif [[ -f "$1" ]]
then
  echo renaming \'"$1"\'
  rename_file "$1"
else
  echo "Expecting a directory as input"
  exit -1
fi
